require 'net/http'
require 'rexml/document'

# Web Url
url = '{0} ? {1}'

# get the XML data as a string
xml_data = Net::HTTP.get_response(URI.parse(url)).body

# extract event information
doc = REXML::Document.new(xml_data)
titles = []
rowKeys = []
partitionKeys = []
timestamps = []
entityids = []
names = []
addresses = []
weburls = []
gis_ids = []
ssls = []

doc.elements.each('feed/title') do |ele|
   titles << ele.text
end
doc.elements.each('feed/entry/content/m:properties/d:PartitionKey') do |ele|
   partitionKeys << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:RowKey') do |ele|
   rowKeys << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:Timestamp ') do |ele|
   timestamps << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:entityid ') do |ele|
   entityids << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:name') do |ele|
   names << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:address') do |ele|
   addresses << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:weburl') do |ele|
   weburls << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:gis_id') do |ele|
   gis_ids << ele.text
 end
 doc.elements.each('feed/entry/content/m:properties/d:ssl') do |ele|
   ssls << ele.text
end


titles.each_with_index do |title, idx|
   print "#{title} => #{partitionKeys[idx]} \t #{rowKeys[idx]} \t 
   #{timestamps[idx]} \t #{entityids[idx]} \t #{names[idx]} \t 
   #{addresses[idx]} \t #{weburls[idx]} \t #{gis_ids[idx]} \t 
   #{ssls[idx]} \t"
end